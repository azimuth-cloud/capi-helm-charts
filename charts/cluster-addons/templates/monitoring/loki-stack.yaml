{{- if and .Values.monitoring.enabled .Values.monitoring.loki.enabled }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "cluster-addons.componentName" (list . "loki") }}-config
  labels:
    {{- include "cluster-addons.componentLabels" (list . "loki") | nindent 4 }}
    addons.stackhpc.com/watch: ""
stringData:
  defaults: |
    loki:
      serviceMonitor:
        enabled: true
  overrides: |
    {{- toYaml .Values.monitoring.loki.release.values | nindent 4 }}
# kubectl get secret promtail -n monitoring-system -o jsonpath="{.data.promtail\.yaml}" --kubeconfig loki10 | base64 --decode
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "cluster-addons.componentName" (list . "alloy") }}-config
  labels:
    {{- include "cluster-addons.componentLabels" (list . "alloy") | nindent 4 }}
    addons.stackhpc.com/watch: ""
stringData:
  defaults: |
    discovery.kubernetes "kubernetes_pods" {
      role = "pod"
    }

    discovery.relabel "kubernetes_pods" {
      targets = discovery.kubernetes.kubernetes_pods.targets

      rule {
        source_labels = ["__meta_kubernetes_pod_controller_name"]
        regex         = "([0-9a-z-.]+?)(-[0-9a-f]{8,10})?"
        target_label  = "__tmp_controller_name"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name", "__meta_kubernetes_pod_label_app", "__tmp_controller_name", "__meta_kubernetes_pod_name"]
        regex         = "^;*([^;]+)(;.*)?$"
        target_label  = "app"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_instance", "__meta_kubernetes_pod_label_instance"]
        regex         = "^;*([^;]+)(;.*)?$"
        target_label  = "instance"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_component", "__meta_kubernetes_pod_label_component"]
        regex         = "^;*([^;]+)(;.*)?$"
        target_label  = "component"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_node_name"]
        target_label  = "node_name"
      }

      rule {
        source_labels = ["__meta_kubernetes_namespace"]
        target_label  = "namespace"
      }

      rule {
        source_labels = ["namespace", "app"]
        separator     = "/"
        target_label  = "job"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_name"]
        target_label  = "pod"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_container_name"]
        target_label  = "container"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
        separator     = "/"
        target_label  = "__path__"
        replacement   = "/var/log/pods/*$1/*.log"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_annotationpresent_kubernetes_io_config_hash", "__meta_kubernetes_pod_annotation_kubernetes_io_config_hash", "__meta_kubernetes_pod_container_name"]
        separator     = "/"
        regex         = "true/(.*)"
        target_label  = "__path__"
        replacement   = "/var/log/pods/*$1/*.log"
      }
    }

    local.file_match "kubernetes_pods" {
      path_targets = discovery.relabel.kubernetes_pods.output
    }

    loki.process "kubernetes_pods" {
      forward_to = [loki.write.default.receiver]

      stage.cri { }
    }

    loki.source.file "kubernetes_pods" {
      targets               = local.file_match.kubernetes_pods.targets
      forward_to            = [loki.process.kubernetes_pods.receiver]
      legacy_positions_file = "/run/promtail/positions.yaml"
    }

    discovery.relabel "journal" {
      targets = []

      rule {
        source_labels = ["__journal__systemd_unit"]
        target_label  = "unit"
      }

      rule {
        source_labels = ["__journal__hostname"]
        target_label  = "hostname"
      }

      rule {
        source_labels = ["__journal_priority_keyword"]
        target_label  = "level"
      }
    }

    loki.source.journal "journal" {
      max_age       = "12h0m0s"
      path          = "/var/log/journal"
      relabel_rules = discovery.relabel.journal.rules
      forward_to    = [loki.write.default.receiver]
      labels        = {
        job = "systemd-journal",
      }
    }

    loki.write "default" {
      endpoint {
        url       = "http://loki-stack.monitoring-system.svc:3100/loki/api/v1/push"
        tenant_id = "1"
      }
      external_labels = {}
    }

    # Mount journal directory and machine-id file into promtail pods
    extraVolumes:
      - name: journal
        hostPath:
          path: /var/log/journal
      - name: machine-id
        hostPath:
          path: /etc/machine-id
    extraVolumeMounts:
      - name: journal
        mountPath: /var/log/journal
        readOnly: true
      - name: machine-id
        mountPath: /etc/machine-id
        readOnly: true
  overrides: |
    {{- toYaml .Values.monitoring.alloy.release.values | nindent 4 }}
---
apiVersion: addons.stackhpc.com/v1alpha1
kind: HelmRelease
metadata:
  name: {{ include "cluster-addons.componentName" (list . "loki") }}
  labels: {{ include "cluster-addons.componentLabels" (list . "loki") | nindent 4 }}
spec:
  clusterName: {{ include "cluster-addons.clusterName" . }}
  bootstrap: true
  chart: {{ toYaml .Values.monitoring.loki.chart | nindent 4 }}
  targetNamespace: {{ .Values.monitoring.loki.release.namespace }}
  releaseName: loki
  valuesSources:
    - secret:
        name: {{ include "cluster-addons.componentName" (list . "loki") }}-config
        key: defaults
    - secret:
        name: {{ include "cluster-addons.componentName" (list . "loki") }}-config
        key: overrides
  # StatefulSets do not allow their PVCs to be resized, but we can use lifecycle hooks
  # to ensure that it happens correctly
  lifecycleHooks:
    preUpgrade:
      - apiVersion: apps/v1
        kind: StatefulSet
        name: loki
        action: delete
    {{- if .Values.monitoring.loki.release.values.loki.persistence.enabled }}
      - apiVersion: v1
        kind: PersistentVolumeClaim
        selector:
          app: loki
          release: loki-stack
        action: patch
        options:
          data:
            spec:
              resources:
                requests:
                  storage: {{ .Values.monitoring.loki.release.values.loki.persistence.size }}
    {{- else }}
    postUpgrade:
      - apiVersion: v1
        kind: PersistentVolumeClaim
        selector:
          app: loki
          release: loki-stack
        action: delete
    {{- end }}
{{- end }}
---
apiVersion: addons.stackhpc.com/v1alpha1
kind: HelmRelease
metadata:
  name: {{ include "cluster-addons.componentName" (list . "promtail") }}
  labels: {{ include "cluster-addons.componentLabels" (list . "promtail") | nindent 4 }}
spec:
  clusterName: {{ include "cluster-addons.clusterName" . }}
  bootstrap: true
  chart: {{ toYaml .Values.monitoring.promtail.chart | nindent 4 }}
  targetNamespace: {{ .Values.monitoring.promtail.release.namespace }}
  releaseName: promtail
  valuesSources:
    - secret:
        name: {{ include "cluster-addons.componentName" (list . "promtail") }}-config
        key: defaults
    - secret:
        name: {{ include "cluster-addons.componentName" (list . "promtail") }}-config
        key: overrides
---
apiVersion: addons.stackhpc.com/v1alpha1
kind: Manifests
metadata:
  name: {{ include "cluster-addons.componentName" (list . "loki-dashboards") }}
  labels: {{ include "cluster-addons.componentLabels" (list . "loki-dashboards") | nindent 4 }}
spec:
  clusterName: {{ include "cluster-addons.clusterName" . }}
  bootstrap: true
  targetNamespace: {{ .Values.monitoring.loki.release.namespace }}
  releaseName: loki-dashboards
  manifestSources:
    - template: |
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: loki-grafana-datasource
          labels:
            grafana_datasource: "1"
        data:
          loki-datasource.yaml: |-
            apiVersion: 1
            datasources:
              - name: Loki
                type: loki
                url: http://loki-stack.{{ .Values.monitoring.loki.release.namespace }}:3100
                access: proxy
                version: 1
                isDefault: false
    - template: |
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: loki-grafana-dashboards
          labels:
            grafana_dashboard: "1"
        data:
          loki-pod-logs-dashboard.json: |
            {% raw %}
            {{- .Files.Get "grafana-dashboards/loki-pod-logs-dashboard.json" | nindent 12 }}
            {% endraw %}
          loki-systemd-logs-dashboard.json: |
            {% raw %}
            {{- .Files.Get "grafana-dashboards/loki-systemd-logs-dashboard.json" | nindent 12 }}
            {% endraw %}
          loki-metrics-dashboard.json: |
            {% raw %}
            {{- .Files.Get "grafana-dashboards/loki-metrics-dashboard.json" | nindent 12 }}
            {% endraw %}


